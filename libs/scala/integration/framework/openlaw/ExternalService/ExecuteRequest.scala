// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package integration.framework.openlaw.ExternalService

/** The Request message to be processed by the External Service.
  *
  * @param callerId
  *   The contractId or flowId string value generated by OpenLaw.
  *   e.g: 1a86c0ab-7895-497c-babb-a3c089df1203
  * @param actionId
  *   The actionId string value which is an arbitrary content that 
  *   represents the action that happened in OpenLaw VM. 
  * @param requestId
  *   The requestId string value that represents the request in 
  *   Integrator Framework.
  * @param inputJson
  *   The inputJson string value that matches the Input type defined 
  *   in the Markup Interface. It must be converted from string to 
  *   json value in order to access its properties.
  * @param servicePublicAddress
  *   The ethereum public address from the External Service as 
  *   provided in the EthreumAddressResponse.
  */
@SerialVersionUID(0L)
final case class ExecuteRequest(
    callerId: _root_.scala.Predef.String = "",
    actionId: _root_.scala.Predef.String = "",
    requestId: _root_.scala.Predef.String = "",
    inputJson: _root_.scala.Predef.String = "",
    servicePublicAddress: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExecuteRequest] with scalapb.lenses.Updatable[ExecuteRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = callerId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = actionId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = requestId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = inputJson
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = servicePublicAddress
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = callerId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = actionId
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = requestId
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = inputJson
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = servicePublicAddress
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): integration.framework.openlaw.ExternalService.ExecuteRequest = {
      var __callerId = this.callerId
      var __actionId = this.actionId
      var __requestId = this.requestId
      var __inputJson = this.inputJson
      var __servicePublicAddress = this.servicePublicAddress
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __callerId = _input__.readString()
          case 18 =>
            __actionId = _input__.readString()
          case 26 =>
            __requestId = _input__.readString()
          case 34 =>
            __inputJson = _input__.readString()
          case 42 =>
            __servicePublicAddress = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      integration.framework.openlaw.ExternalService.ExecuteRequest(
          callerId = __callerId,
          actionId = __actionId,
          requestId = __requestId,
          inputJson = __inputJson,
          servicePublicAddress = __servicePublicAddress
      )
    }
    def withCallerId(__v: _root_.scala.Predef.String): ExecuteRequest = copy(callerId = __v)
    def withActionId(__v: _root_.scala.Predef.String): ExecuteRequest = copy(actionId = __v)
    def withRequestId(__v: _root_.scala.Predef.String): ExecuteRequest = copy(requestId = __v)
    def withInputJson(__v: _root_.scala.Predef.String): ExecuteRequest = copy(inputJson = __v)
    def withServicePublicAddress(__v: _root_.scala.Predef.String): ExecuteRequest = copy(servicePublicAddress = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = callerId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = actionId
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = requestId
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = inputJson
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = servicePublicAddress
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(callerId)
        case 2 => _root_.scalapb.descriptors.PString(actionId)
        case 3 => _root_.scalapb.descriptors.PString(requestId)
        case 4 => _root_.scalapb.descriptors.PString(inputJson)
        case 5 => _root_.scalapb.descriptors.PString(servicePublicAddress)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = integration.framework.openlaw.ExternalService.ExecuteRequest
}

object ExecuteRequest extends scalapb.GeneratedMessageCompanion[integration.framework.openlaw.ExternalService.ExecuteRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[integration.framework.openlaw.ExternalService.ExecuteRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): integration.framework.openlaw.ExternalService.ExecuteRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    integration.framework.openlaw.ExternalService.ExecuteRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[integration.framework.openlaw.ExternalService.ExecuteRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      integration.framework.openlaw.ExternalService.ExecuteRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ExternalServiceProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ExternalServiceProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = integration.framework.openlaw.ExternalService.ExecuteRequest(
  )
  implicit class ExecuteRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, integration.framework.openlaw.ExternalService.ExecuteRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, integration.framework.openlaw.ExternalService.ExecuteRequest](_l) {
    def callerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.callerId)((c_, f_) => c_.copy(callerId = f_))
    def actionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.actionId)((c_, f_) => c_.copy(actionId = f_))
    def requestId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.requestId)((c_, f_) => c_.copy(requestId = f_))
    def inputJson: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.inputJson)((c_, f_) => c_.copy(inputJson = f_))
    def servicePublicAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.servicePublicAddress)((c_, f_) => c_.copy(servicePublicAddress = f_))
  }
  final val CALLERID_FIELD_NUMBER = 1
  final val ACTIONID_FIELD_NUMBER = 2
  final val REQUESTID_FIELD_NUMBER = 3
  final val INPUTJSON_FIELD_NUMBER = 4
  final val SERVICEPUBLICADDRESS_FIELD_NUMBER = 5
  def of(
    callerId: _root_.scala.Predef.String,
    actionId: _root_.scala.Predef.String,
    requestId: _root_.scala.Predef.String,
    inputJson: _root_.scala.Predef.String,
    servicePublicAddress: _root_.scala.Predef.String
  ): _root_.integration.framework.openlaw.ExternalService.ExecuteRequest = _root_.integration.framework.openlaw.ExternalService.ExecuteRequest(
    callerId,
    actionId,
    requestId,
    inputJson,
    servicePublicAddress
  )
}
