/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.integration.framework.openlaw.Empty', null, global);
goog.exportSymbol('proto.integration.framework.openlaw.EthereumAddressResponse', null, global);
goog.exportSymbol('proto.integration.framework.openlaw.ExecuteRequest', null, global);
goog.exportSymbol('proto.integration.framework.openlaw.ExecuteResponse', null, global);
goog.exportSymbol('proto.integration.framework.openlaw.ExecuteResponse.Status', null, global);
goog.exportSymbol('proto.integration.framework.openlaw.MarkupInterfaceResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.integration.framework.openlaw.EthereumAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.integration.framework.openlaw.EthereumAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.integration.framework.openlaw.EthereumAddressResponse.displayName = 'proto.integration.framework.openlaw.EthereumAddressResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.integration.framework.openlaw.EthereumAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.integration.framework.openlaw.EthereumAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.integration.framework.openlaw.EthereumAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.EthereumAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.integration.framework.openlaw.EthereumAddressResponse}
 */
proto.integration.framework.openlaw.EthereumAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.integration.framework.openlaw.EthereumAddressResponse;
  return proto.integration.framework.openlaw.EthereumAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.integration.framework.openlaw.EthereumAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.integration.framework.openlaw.EthereumAddressResponse}
 */
proto.integration.framework.openlaw.EthereumAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.integration.framework.openlaw.EthereumAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.integration.framework.openlaw.EthereumAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.integration.framework.openlaw.EthereumAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.EthereumAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.integration.framework.openlaw.EthereumAddressResponse.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.EthereumAddressResponse.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.integration.framework.openlaw.MarkupInterfaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.integration.framework.openlaw.MarkupInterfaceResponse.displayName = 'proto.integration.framework.openlaw.MarkupInterfaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.integration.framework.openlaw.MarkupInterfaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.integration.framework.openlaw.MarkupInterfaceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    definition: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.integration.framework.openlaw.MarkupInterfaceResponse}
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.integration.framework.openlaw.MarkupInterfaceResponse;
  return proto.integration.framework.openlaw.MarkupInterfaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.integration.framework.openlaw.MarkupInterfaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.integration.framework.openlaw.MarkupInterfaceResponse}
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.integration.framework.openlaw.MarkupInterfaceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.integration.framework.openlaw.MarkupInterfaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string definition = 1;
 * @return {string}
 */
proto.integration.framework.openlaw.MarkupInterfaceResponse.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.MarkupInterfaceResponse.prototype.setDefinition = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.integration.framework.openlaw.ExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.integration.framework.openlaw.ExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.integration.framework.openlaw.ExecuteRequest.displayName = 'proto.integration.framework.openlaw.ExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.integration.framework.openlaw.ExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.integration.framework.openlaw.ExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.ExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputjson: jspb.Message.getFieldWithDefault(msg, 4, ""),
    servicepublicaddress: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.integration.framework.openlaw.ExecuteRequest}
 */
proto.integration.framework.openlaw.ExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.integration.framework.openlaw.ExecuteRequest;
  return proto.integration.framework.openlaw.ExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.integration.framework.openlaw.ExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.integration.framework.openlaw.ExecuteRequest}
 */
proto.integration.framework.openlaw.ExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputjson(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicepublicaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.integration.framework.openlaw.ExecuteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.integration.framework.openlaw.ExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.ExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputjson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServicepublicaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string callerId = 1;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.getCallerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteRequest.prototype.setCallerid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string actionId = 2;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.getActionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteRequest.prototype.setActionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string requestId = 3;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteRequest.prototype.setRequestid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string inputJson = 4;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.getInputjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteRequest.prototype.setInputjson = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string servicePublicAddress = 5;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteRequest.prototype.getServicepublicaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteRequest.prototype.setServicepublicaddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.integration.framework.openlaw.ExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.integration.framework.openlaw.ExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.integration.framework.openlaw.ExecuteResponse.displayName = 'proto.integration.framework.openlaw.ExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.integration.framework.openlaw.ExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.integration.framework.openlaw.ExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.ExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outputjson: jspb.Message.getFieldWithDefault(msg, 4, ""),
    outputsignature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    message: jspb.Message.getFieldWithDefault(msg, 7, ""),
    servicepublicaddress: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.integration.framework.openlaw.ExecuteResponse}
 */
proto.integration.framework.openlaw.ExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.integration.framework.openlaw.ExecuteResponse;
  return proto.integration.framework.openlaw.ExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.integration.framework.openlaw.ExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.integration.framework.openlaw.ExecuteResponse}
 */
proto.integration.framework.openlaw.ExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputjson(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputsignature(value);
      break;
    case 6:
      var value = /** @type {!proto.integration.framework.openlaw.ExecuteResponse.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicepublicaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.integration.framework.openlaw.ExecuteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.integration.framework.openlaw.ExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.ExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutputjson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOutputsignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServicepublicaddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.integration.framework.openlaw.ExecuteResponse.Status = {
  FAILURE: 0,
  SUCCESS: 1
};

/**
 * optional string callerId = 1;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getCallerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setCallerid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string actionId = 2;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getActionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setActionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string requestId = 3;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setRequestid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string outputJson = 4;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getOutputjson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setOutputjson = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string outputSignature = 5;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getOutputsignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setOutputsignature = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Status status = 6;
 * @return {!proto.integration.framework.openlaw.ExecuteResponse.Status}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getStatus = function() {
  return /** @type {!proto.integration.framework.openlaw.ExecuteResponse.Status} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.integration.framework.openlaw.ExecuteResponse.Status} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string message = 7;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string servicePublicAddress = 8;
 * @return {string}
 */
proto.integration.framework.openlaw.ExecuteResponse.prototype.getServicepublicaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.integration.framework.openlaw.ExecuteResponse.prototype.setServicepublicaddress = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.integration.framework.openlaw.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.integration.framework.openlaw.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.integration.framework.openlaw.Empty.displayName = 'proto.integration.framework.openlaw.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.integration.framework.openlaw.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.integration.framework.openlaw.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.integration.framework.openlaw.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.integration.framework.openlaw.Empty}
 */
proto.integration.framework.openlaw.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.integration.framework.openlaw.Empty;
  return proto.integration.framework.openlaw.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.integration.framework.openlaw.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.integration.framework.openlaw.Empty}
 */
proto.integration.framework.openlaw.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.integration.framework.openlaw.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.integration.framework.openlaw.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.integration.framework.openlaw.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.integration.framework.openlaw.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.integration.framework.openlaw);
