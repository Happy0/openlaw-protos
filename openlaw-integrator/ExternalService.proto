syntax = "proto3";

package integration.framework.openlaw;

// The External Service definition that is called by OpenLaw Integrator Framework.
service ExternalService {
    // Gets the ethereum public address from the service which is used to verify signatures from the service. 
    rpc GetEthereumAddress (Empty) returns (EthereumAddressResponse) { }

    // Gets the server Markup Interface definition to be used by OpenLaw template editor.
    rpc GetMarkupInterface (Empty) returns (MarkupInterfaceResponse) { }

    // Executes the request from OpenLaw Integrator Framework and waits for the External Service response.
    rpc Execute (ExecuteRequest) returns (ExecuteResponse) { }
}

// The Ethereum Address response message.
message EthereumAddressResponse {
    //The Ethereum public address generated by the External Service.
    string address = 1;
}

// The Markup Interface response message.
message MarkupInterfaceResponse {
    // The Markup Interface definition that matches the OpenLaw Input/Output structures, see: [TODO: add link to docs]
    string definition = 1;
}

// The Request message to be processed by the External Service.
message ExecuteRequest {
    // The contractId string value generated by OpenLaw, e.g: 1a86c0ab-7895-497c-babb-a3c089df1203
    string contractId = 1;
    // The actionId string value which is an arbitrary content that represents the action that happened in OpenLaw VM. 
    string actionId = 2;
    // The requestId string value that represents the request in Integrator Framework.
    string requestId = 3;
    // The inputJson string value that matches the Input type defined in the Markup Interface. It must be converted from string to json value in order to access its properties.  
    string inputJson = 4;
    // The ethereum public address from the External Service as provided in the EthreumAddressResponse.
    string servicePublicAddress = 5;
}

// The Response message obtained from the execute call to the External Service.
message ExecuteResponse {
    // The contractId string value generated by OpenLaw, e.g: 1a86c0ab-7895-497c-babb-a3c089df1203
    string contractId = 1;
    // The actionId string value which is an arbitrary content that represents the action that happened in OpenLaw VM. 
    string actionId = 2;
    // The requestId string value that represents the request in Integrator Framework.
    string requestId = 3;
    // The outputJson as string value that matches the Output type defined in the Markup Interface. It must be converted from json to string.
    string outputJson = 4;
    // The output signature string which represents the signature of the outputJson field. 
    string outputSignature = 5;
    // The possible statuses of the response after the execution is terminated. 
    enum Status {
        SUCCESS = 0;
        FAILURE = 1;
    }
    // The status of the execution.
    Status status = 6;
    // The message returned by the External Service to indicate if the execution was completed with success or not. It can be an error message too. 
    string message = 7;
    // The ethereum public address from the External Service as provided in the EthreumAddressResponse.
    string servicePublicAddress = 8;
}

// The Empty request message to indicates that no fields are passed in the request.
message Empty {}